
     Scramble will be an encryption program started in python, perhaps moved to C if performance
     is an issue.

     Take input in 8 byte chunks.

   ===================================================================================================

   Originally, stats from each 8-byte block was going to determine how THAT block was scrambled.
   Then I realized that each block would then always scramble to the same thing.
   So now I think scramble will add a block of 8 random bytes to the front of each data file, the "key block".
   It will use stats from this "key block" to scramble the first block from the data stream.
   Stats from the first data stream block will be used to determine how the second block is scrambled and so forth.

   I) Perform one or more of different classes of transformations.  Operations will be in this order.

     0) count the one bits in the data block
        calculate the total partity of the data block
        vertical parity - construct btye by shifting in the partity of each byte
        horizontal parity - XOR all bytes
     
     1) load the next block

     2) horizontal sheer by n (byte-rotations to the left)
        first   byte rotates left by     <- unchanged
        second  byte rotates left by 1*n
        third   byte rotates left by 2*n
        forth   byte rotates left by 3*n
        fifth   byte rotates left by 4*n
        sixth   byte rotates left by 5*n
        seventh byte rotates left by 6*n
        last    byte rotates left by 7*n

     3) vertical sheer by n ( column-rotations down )
        LSB   column shifts down by     <- unchanged
          2's column shifts down by 1*n
          4's column shifts down by 2*n
          8's column shifts down by 3*n
         16's column shifts down by 4*n
         32's column shifts down by 5*n
         64's column shifts down by 6*n
        128's column shifts down by 7*n

     4) block rotation 0, 90, 180 or 270, (clockwise)
        executed based on last two digits of count of 1's
        00 -  no rotation
        01 -  90 rotation
        10 - 180 rotation
        11 - 270 rotation

     5) Inversion, flip all the bits 0->1 and 1->0
        always - OR - only on even - OR - only on odd parity


These transformations and their parameters will be determined by the data in each block.

     Things we will gleen from each block of 8 bytes.

1    Parity of the entire block
2    - countNumber of 00's, 01's, 10's and 11's ( 0 - 32 ) preserved after even-only byte-rotations
3    * horzontal parity (AKA parity of each byte)   ( 0, 1 ) preserved through horizontal rotations
4    * vertical  parity (AKA parity of each column) ( 0, 1 ) preserved through vertical   rotations
5    * whole parity ( 0, 1 ) preserved through all transformations
6    * countNumber of 1's ( 0 - 64 ) not preserved after flipping all bits

     Count of ones in binary and decial
     ------------
     1000000 - 64  <- mostly ones
     0111111 - 63  <- mostly ones
     0111110 - 62  <- mostly ones
     0111101 - 61
     .
     .
     .
     0000011 -  3
     0000010 -  2 <- mostly zeroes
     0000001 -  1 <- mostly zeroes
     0000000 -  0 <- mostly zeroes

     I will store some transformations for the bytes 00 - FF to speed operations

     Bytes
     Orginal     Reversed    Inverted   Parity  Ones  (and counts for 00, 01, 10, and 11 occurances)
     76543210    01234567    76543210      P    0-8
     ________    ________    ________
     00000000    00000000    11111111      0    0
     00000001    10000000    11111110      1    1
     00001111    11110000    11110000      0    4
     11110000    00001111    00001111      0    4
     01111111    11111110    10000000      1    7
     01010101    10101010    10101010      0    4
     10101010    01010101    01010101      0    4
     11111111    11111111    00000000      0    8


   Below from some demonstations of the classes of transforms that will be available.
   In the examples underscores are used instead of 0's to make the 1's more visable.
   Also whereever letters a-h and A-H are used, they are place holders for binary digits 0 or 1
   and are used to show where a binary digits starts and ends for a given transform.

   ---------------------------------------------------------------------------------------------------

     Block Flips
     Original    Horzontal   Vertical      Both
     ____1111    1111____    1__1____    ____1__1
     ____1__1    1__1____    1111_1__    __1_1111
     ____1__1    1__1____    1111__1_    _1__1111
     ____1__1    1__1____    ________    ________
     ________    ________    ____1__1    1__1____
     1111__1_    _1__1111    ____1__1    1__1____
     1111_1__    __1_1111    ____1__1    1__1____
     1__1____    ____1__1    ____1111    1111____

   ---------------------------------------------------------------------------------------------------

     Block Rotations
     Original      90 CW      180 CW       90 CCW
     _______1    1_______    11111111    11111111
     ______11    11______    1_____1_    _1_____1
     _____1_1    1_1_____    1____1__    __1____1
     ____1__1    1__1____    1___1___    ___1___1
     ___1___1    1___1___    1__1____    ____1__1
     __1____1    1____1__    1_1_____    _____1_1
     _1_____1    1_____1_    11______    ______11
     11111111    11111111    1_______    _______1

   ---------------------------------------------------------------------------------------------------

     Barber Pole transform (swapping even and odd columns with their adjacent counter parts)
     (even and odd columns seperated slightly for clarity)

        Original           Barber Poled
R
o         COLUMN
w    7 6  5 4  3 2  1 0    7 6  5 4  3 2  1 0
     - -  - -  - -  - -    - -  - -  - -  - -
0 |  _ 1  _ 1  1 _  H h    1 _  1 _  _ 1  h H
1 |  _ 1  _ 1  _ 1  G g    1 _  1 _  1 _  g G
2 |  _ 1  _ 1  1 _  F f    1 _  1 _  _ 1  f F
3 |  _ 1  _ 1  _ _  E e    1 _  1 _  _ _  e E
4 |  1 _  _ 1  _ _  D d    _ 1  1 _  _ _  d D
5 |  1 _  _ 1  _ _  C c    _ 1  1 _  _ _  c C
6 |  1 _  _ 1  1 1  B b    _ 1  1 _  1 1  b B
7 |  1 _  _ 1  1 1  A a    _ 1  1 _  1 1  a A

   ---------------------------------------------------------------------------------------------------

     Horizontal Byte Sheering Left (each sucsesive row shifts bits N*row%8 times)

        Original            N = 1              N = 2             N = 7          
R
o         COLUMN
w    7 6 5 4 3 2 1 0
     - - - - - - - -
0 |  _ _ _ _ _ _ _ h    _ _ _ _ _ _ _ h    _ _ _ _ _ _ _ h    _ _ _ _ _ _ _ h <- this transform will always leave the row 0 the same
1 |  _ _ _ _ _ _ _ g    _ _ _ _ _ _ g _    _ _ _ _ _ g _ _    g _ _ _ _ _ _ _
2 |  _ _ _ _ _ _ _ f    _ _ _ _ _ f _ _    _ _ _ f _ _ _ _    _ f _ _ _ _ _ _
3 |  _ _ _ _ _ _ _ e    _ _ _ _ e _ _ _    _ e _ _ _ _ _ _    _ _ e _ _ _ _ _
4 |  _ _ _ _ _ _ _ d    _ _ _ d _ _ _ _    _ _ _ _ _ _ _ d    _ _ _ d _ _ _ _
5 |  _ _ _ _ _ _ _ c    _ _ c _ _ _ _ _    _ _ _ _ _ c _ _    _ _ _ _ c _ _ _
6 |  _ _ _ _ _ _ _ b    _ b _ _ _ _ _ _    _ _ _ b _ _ _ _    _ _ _ _ _ b _ _
7 |  _ _ _ _ _ _ _ a    a _ _ _ _ _ _ _    _ b _ _ _ _ _ _    _ _ _ _ _ _ a _


     Vertical Byte Sheering Down (each sucsesive column shifts bits N * row % 8 times)

        Original            N = 1              N = 2             N = 7          
R
o         COLUMN
w    7 6 5 4 3 2 1 0
     - - - - - - - - /-- this transform will always leave the column 0 the same
0 |  A B C D E F G H    _ _ _ _ _ _ _ H    _ _ _ D _ _ _ H    _ _ _ _ _ _ _ H
1 |  _ _ _ _ _ _ _ _    _ _ _ _ _ _ G _    _ _ _ _ _ _ _ _    A _ _ _ _ _ _ _
2 |  _ _ _ _ _ _ _ _    _ _ _ _ _ F _ _    _ _ C _ _ _ G _    _ B _ _ _ _ _ _
3 |  _ _ _ _ _ _ _ _    _ _ _ _ E _ _ _    _ _ _ _ _ _ _ _    _ _ C _ _ _ _ _
4 |  _ _ _ _ _ _ _ _    _ _ _ D _ _ _ _    _ B _ _ _ F _ _    _ _ _ D _ _ _ _
5 |  _ _ _ _ _ _ _ _    _ _ C _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ E _ _ _
6 |  _ _ _ _ _ _ _ _    _ B _ _ _ _ _ _    A _ _ _ E _ _ _    _ _ _ _ _ F _ _
7 |  _ _ _ _ _ _ _ _    A _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ G _

   ---------------------------------------------------------------------------------------------------

   Gear Rotations       00 00 00 00       00 - no rotation    TL - Top    Left
                        TL TR BR BL       01 - 99 CW          TR - Top    Right
                                          10 - 180            TR - Bottom Right
                                          11 - 90 CCW         TL - Bottom Left

R
O
W         COLUMN
     7 6 5 4 3 2 1 0    Rotation 90 CW     Rotation 180       Rotation 90 CCW
     - - - - - - - -    - - - - - - - -    - - - - - - - -    - - - - - - - -
0 |  A B C D _ _ _ _    N I E A _ _ _ _    S P O N _ _ _ _    D H M S _ _ _ _
1 |  E F G H _ _ _ _    O J F B _ _ _ _    M K J I _ _ _ _    C G K P _ _ _ _
2 |  I J K M _ _ _ _    P K G C _ _ _ _    H G F E _ _ _ _    B F J O _ _ _ _
3 |  N O P S _ _ _ _    S M H D _ _ _ _    D C B A _ _ _ _    A E I N _ _ _ _
4 |  _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _
5 |  _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _
6 |  _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _
7 |  _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _

R
O
W         COLUMN
     7 6 5 4 3 2 1 0    Rotation 90 CW     Rotation 180       Rotation 90 CCW
     - - - - - - - -    - - - - - - - -    - - - - - - - -    - - - - - - - -
0 |  _ _ _ _ A B C D    _ _ _ _ N I E A    _ _ _ _ S P O N    _ _ _ _ D H M S
1 |  _ _ _ _ E F G H    _ _ _ _ O J F B    _ _ _ _ M K J I    _ _ _ _ C G K P
2 |  _ _ _ _ I J K M    _ _ _ _ P K G C    _ _ _ _ H G F E    _ _ _ _ B F J O
3 |  _ _ _ _ N O P S    _ _ _ _ S M H D    _ _ _ _ D C B A    _ _ _ _ A E I N
4 |  _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _
5 |  _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _
6 |  _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _
7 |  _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _

R
O
W         COLUMN
     7 6 5 4 3 2 1 0    Rotation 90 CW     Rotation 180       Rotation 90 CCW
     - - - - - - - -    - - - - - - - -    - - - - - - - -    - - - - - - - -
0 |  _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _
1 |  _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _
2 |  _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _
3 |  _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _
4 |  A B C D _ _ _ _    N I E A _ _ _ _    S P O N _ _ _ _    D H M S _ _ _ _
5 |  E F G H _ _ _ _    O J F B _ _ _ _    M K J I _ _ _ _    C G K P _ _ _ _
6 |  I J K M _ _ _ _    P K G C _ _ _ _    H G F E _ _ _ _    B F J O _ _ _ _
7 |  N O P S _ _ _ _    S M H D _ _ _ _    D C B A _ _ _ _    A E I N _ _ _ _

R
O
W         COLUMN
     7 6 5 4 3 2 1 0    Rotation 90 CW     Rotation 180       Rotation 90 CCW
     - - - - - - - -    - - - - - - - -    - - - - - - - -    - - - - - - - -
0 |  _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _
1 |  _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _
2 |  _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _
3 |  _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _
4 |  _ _ _ _ A B C D    _ _ _ _ N I E A    _ _ _ _ S P O N    _ _ _ _ D H M S
5 |  _ _ _ _ E F G H    _ _ _ _ O J F B    _ _ _ _ M K J I    _ _ _ _ C G K P
6 |  _ _ _ _ I J K M    _ _ _ _ P K G C    _ _ _ _ H G F E    _ _ _ _ B F J O
7 |  _ _ _ _ N O P S    _ _ _ _ S M H D    _ _ _ _ D C B A    _ _ _ _ A E I N

   ---------------------------------------------------------------------------------------------------

   Checkerboard

R
O         COLUMN
W    7 6 5 4 3 2 1 0
     - - - - - - - -                   
0 |  A B _ _ Q R _ _    _ _ A B _ _ 3 4    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _
1 |  D C _ _ T S _ _    _ _ D C _ _ 6 5    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _
2 |  _ _ E F _ _ U V    U V _ _ E F _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _
3 |  _ _ H G _ _ X W    X W _ _ H G _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _
4 |  2 3 _ _ I J _ _    _ _ Q R _ _ I J    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _
5 |  5 4 _ _ L K _ _    _ _ T S _ _ L K    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _
6 |  _ _ Y Z _ _ M N    Y Z _ _ M N _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _
7 |  _ _ 0 1 _ _ P O    2 1 _ _ P O _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _

   a b   a b           3 2 2 = 12!
   d c   d c

   4! = 24 transforms
        1 that move     0 positions  1 2x2 squares in checkerboard =  16 possible outcomes
        6 that move all 2 positions  6 2x2 squares in checkerboard = 386 possible outcomes
        8 that move all 3 positions  8 2x2 squares in checkerboard = 386 possible outcomes
        9 that move all 4 positions  9 2x2 squares in checkerboard = 386 possible outcomes

              6:     96
              8:    128
              9:    144
 6 + 8     = 14:    224
 6 + 9     = 15:    240
 8 + 9     = 17:    272
 6 + 8 + 9 = 23:    368
             24:    384

2x2 square  0 1
            3 2

N  Transform    N  Transform    N  Transform    N  Transform
0  0 1 2 3	2  1 0 2 3	3  2 0 1 3	4  3 0 1 2	
2  0 1 3 2	4  1 0 3 2	4  2 0 3 1	3  3 0 2 1	
2  0 2 1 3	3  1 2 0 3	2  2 1 0 3	3  3 1 0 2	
3  0 2 3 1	4  1 2 3 0	3  2 1 3 0	2  3 1 2 0	
3  0 3 1 2	4  1 3 0 2	4  2 3 0 1	4  3 2 0 1	
2  0 3 2 1	3  1 3 2 0	4  2 3 1 0	4  3 2 1 0	

N is number of bit locations changed
Transform is the new arrangement of the bits in the 2x2-bit square
          	          	          	          	
   ---------------------------------------------------------------------------------------------------

   Whirlpool
R
O         COLUMN
W    7 6 5 4 3 2 1 0
     - - - - - - - -                   
0 |  A B C D E F G H    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _
1 |  2 _ _ _ _ _ _ I    _ A B C D E F _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _
2 |  1 _ _ _ _ _ _ J    _ T _ _ _ _ G _    _ _ A B C D _ _    _ _ _ _ _ _ _ _
3 |  0 _ _ _ _ _ _ K    _ S _ _ _ _ H _    _ _ L _ _ E _ _    _ _ _ A B _ _ _
4 |  Z _ _ _ _ _ _ L    _ R _ _ _ _ I _    _ _ K _ _ F _ _    _ _ _ D C _ _ _
5 |  Y _ _ _ _ _ _ M    _ Q _ _ _ _ J _    _ _ J I H G _ _    _ _ _ _ _ _ _ _
6 |  X _ _ _ _ _ _ N    _ P O N M L K _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _
7 |  V U T S R Q P O    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _

     28 bit locations   20 bit locations   12 bit locations   4 bit locations

Rotations should be between 1 and N-1.

     27 rotations       19 rotations       11 rotations      23 unique trasnforms
      4 flips            4 flips            4 flips
     31 transforms      23 transforms      15 transforms

   ---------------------------------------------------------------------------------------------------

Salt Analisys:

Whirlpool:
      31 x 23 x 15 x 23 =
   245985 combined transforms

   need 4 numbers, 31, 23, 15, 23  So 5 bits each

Checkerboard:

   need 16 numbers, 23  So 5 bits each

Salt Explanation:

  first 5 bytes encode for  pre-checkerboard whirlpool
  and                      post-checkerboard whirlpool
  last 10 bytes encode for checkerboard

  1   a  f  k  p    u  0  5  A
  2   b  g  l  q    v  1  6  B
  3   c  h  m  r    w  2  7  C
  4   d  i  n  s    x  3  8  D
  5   e  j  o  t    y  4  9  E 

  6   a  f  k  p  u  0  5  A
  7   b  g  l  q  v  1  6  B
  8   c  h  m  r  w  2  7  C
  9   d  i  n  s  x  3  8  D
 10   e  j  o  t  y  4  9  E 

 11   a  f  k  p  u  0  5  A
 12   b  g  l  q  v  1  6  B
 13   c  h  m  r  w  2  7  C
 14   d  i  n  s  x  3  8  D
 15   e  j  o  t  y  4  9  E 

   ---------------------------------------------------------------------------------------------------

   Rotations

R
O
W         COLUMN
     7 6 5 4 3 2 1 0
     - - - - - - - -                       Rotation 90 degrees clockwise
0 |  A B C D E F G H    _ _ _ a _ _ _ A    Row 0 -> Column 0  Column 0 -> Row 7
1 |  _ _ _ _ _ _ _ _    _ _ _ b _ _ _ B    Row 1 -> Column 1  Column 0 -> Row 7
2 |  _ _ _ _ _ _ _ _    _ _ _ c _ _ _ C    Row 2 -> Column 2  Column 0 -> Row 7
3 |  _ _ _ _ _ _ _ _    _ _ _ d _ _ _ D    Row 3 -> Column 3  Column 0 -> Row 7
4 |  a b c d e f g h    _ _ _ e _ _ _ E    Row 4 -> Column 4  Column 0 -> Row 7
5 |  _ _ _ _ _ _ _ _    _ _ _ f _ _ _ F    Row 5 -> Column 5  Column 0 -> Row 7
6 |  _ _ _ _ _ _ _ _    _ _ _ g _ _ _ G    Row 6 -> Column 6  Column 0 -> Row 7
7 |  _ _ _ _ _ _ _ _    _ _ _ h _ _ _ H    Row 7 -> Column 7  Column 0 -> Row 7

R
O
W         COLUMN
     7 6 5 4 3 2 1 0
     - - - - - - - -                       Rotation 90 degrees counter-clockwise
0 |  A B C D E F G H    H _ _ _ h _ _ _    Row 0 -> Column 7  Column 0 -> Row 0
1 |  _ _ _ _ _ _ _ _    G _ _ _ g _ _ _    Row 1 -> Column 6  Column 0 -> Row 0
2 |  _ _ _ _ _ _ _ _    F _ _ _ f _ _ _    Row 2 -> Column 5  Column 0 -> Row 0
3 |  _ _ _ _ _ _ _ _    E _ _ _ e _ _ _    Row 3 -> Column 4  Column 0 -> Row 0
4 |  a b c d e f g h    D _ _ _ d _ _ _    Row 4 -> Column 3  Column 0 -> Row 0
5 |  _ _ _ _ _ _ _ _    C _ _ _ c _ _ _    Row 5 -> Column 2  Column 0 -> Row 0
6 |  _ _ _ _ _ _ _ _    B _ _ _ b _ _ _    Row 6 -> Column 1  Column 0 -> Row 0
7 |  _ _ _ _ _ _ _ _    A _ _ _ a _ _ _    Row 7 -> Column 0  Column 0 -> Row 0

R
O
W         COLUMN        (equivalent to flipping both vertically and horizonally)
     7 6 5 4 3 2 1 0    Rotation 180 degrees
     - - - - - - - -                      
0 |  A B C D E F G H    _ _ _ _ _ _ _ _  
1 |  _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _  
2 |  _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _  
3 |  _ _ _ _ _ _ _ _    h g f e d c b a  
4 |  a b c d e f g h    _ _ _ _ _ _ _ _  
5 |  _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _  
6 |  _ _ _ _ _ _ _ _    _ _ _ _ _ _ _ _  
7 |  _ _ _ _ _ _ _ _    H G F E D C B A  

   ===================================================================================================
